INFO 04-05 17:03:32 llm_engine.py:87] Initializing an LLM engine with config: model='EleutherAI/pythia-6.9b', tokenizer='/network/scratch/p/prakhar.ganesh/pythia-6.9b/step140000/', tokenizer_mode=auto, revision=step140000, tokenizer_revision=None, trust_remote_code=True, dtype=torch.float16, max_seq_len=2048, download_dir='/network/scratch/p/prakhar.ganesh/pythia-6.9b/step140000/', load_format=auto, tensor_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, device_config=cuda, seed=0)
INFO 04-05 17:03:40 weight_utils.py:163] Using model weights format ['*.bin']
INFO 04-05 17:04:04 llm_engine.py:357] # GPU blocks: 3060, # CPU blocks: 512
INFO 04-05 17:04:06 model_runner.py:684] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 04-05 17:04:06 model_runner.py:688] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 04-05 17:04:12 model_runner.py:756] Graph capturing finished in 6 secs.
    reading sizes...
    reading pointers...
    reading document index...
    creating numpy buffer of mmap...
    creating memory view of numpy buffer...
